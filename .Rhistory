library(twitteR)
library(ROAuth)
source('~/R/twiiter authentication.R')
library(RCurl)
accessURL <- "https://api.twitter.com/oauth/access_token"
requestURL <- "https://api.twitter.com/oauth/request_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "mWqoWwnPle8VRg1aiQKTgtMYn"
consumerSecret <- "AisvpAbHOfsUASqi1kgcIeOgvLcMZ0IqDnFBp5X3g0aS9xoZPq"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake(cainfo="cacert.pem")
registerTwitterOAuth(twitCred)
hello <- searchTwitter('#United',n= 500)
source('~/R/updated.R')
source('~/.active-rstudio-document')
source('~/R/amex.R')
source('~/R/amex.R')
source('~/R/emotion categorizer.R')
source('~/R/amex.R')
source('~/R/amex.R')
hu.liu.pos
source('~/R/amex.R')
source('~/R/amex.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/R/amex.R')
source('~/R/amex.R')
source('~/R/amex.R')
source('~/R/amex.R')
source('~/R/amex.R')
source('~/R/amex_sentiment.R')
install.packages('e1071')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
setwd("~/Downloads/sentiment_analysis_master")
setwd("/home/daksh/Downloads/sentiment_analysis_master")
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
print(pos.words)
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
1
source('~/R/amex_sentiment.R')
print(pos.words)
print(neg.words)
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/R/amex_sentiment.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/college/sem7/dataviz/opengl/assign3/IMT2012012_Assignment2/src/data_cleaner.R')
install.packages('swirl')
library(swirl)
rm(list=ls())
swir()
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
nxt()
nxt()
skip()
x
skip()
a = skip()
skip()
?c
z
c(z,555,z)
z * 2 + 100
skip()
skip()
skip()
skip()
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
skip()
my_div
swirl()
swirl()
install.packages('ggplot2')
library(ggplot2)
news(Version == "1.0.1", package = "ggplot2")
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=("point","smooth"))
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"),method=x)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"),method=loess)
qplot(hwy,data=mpg,color=drv)
qplot(hwy,data=mpg,fill=drv)
qplot(hwy,data=mpg,facets = .~drv)
qplot(hwy,data=mpg,facets = drv~/)
qplot(hwy,data=mpg,facets = drv~.)
qplot(hwy,data=mpg,facets = drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,facets = drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,facets = .~drv)
str(maacs)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
setwd('/home//daksh/R/gsoc/')
if (!file.exists(TEXTFILE)) {
download.file("http://www.gutenberg.org/cache/epub/100/pg100.txt", destfile = TEXTFILE)
}
TEXTFILE = "data/pg100.txt"
if (!file.exists(TEXTFILE)) {
download.file("http://www.gutenberg.org/cache/epub/100/pg100.txt", destfile = TEXTFILE)
}
source('~/.active-rstudio-document')
source('~/R/gsoc/try1.R')
source('~/R/gsoc/try1.R')
source('~/R/gsoc/try1.R')
source('~/R/gsoc/try1.R')
head(testText)
testText = strsplit(testText,"<<[^>]*>>")[[1]]
length(testText)
testText = readLines(testFile)
testText = strsplit(testText,"<<[^>]*>>")[[1]]
length(testText)
head(testText)
tail(testText)
disp(testText)
display(testText)
show(testText)
stats(testText)
stat(testText)
source('~/R/gsoc/try1.R')
testText = readLines(testFile)
testText = strsplit(testText,"<<[^>]*>>")
length(testText)
testText = strsplit(testText,"<<[^>]*>>")[[1]]
source('~/R/gsoc/try1.R')
length(shakespeare)
source('~/.active-rstudio-document')
nchar(shakespeare)
shakespeare = strsplit(shakespeare, "<<[^>]*>>")[[1]]
length(shakespeare)
shakespeare[1]
source('~/R/gsoc/try1.R')
help(del)
??del
install.packages(koRpus)
install.packages("koRpus)
install.packages("koRpus")
documents = strsplit(text, "<<[^>]*>>")[[1]]
library(korpus)
library(koRpus)
setwd('/home/daksh/R/gsoc/')
scraper_gutenberg()
source('~/R/gsoc/test1.R')
scraper_gutenberg()
source('~/R/gsoc/test1.R')
scraper_gutenberg()
source('~/R/gsoc/test1.R')
scraper_gutenberg()
text = scraper_gutenberg()
head(text)
source('~/R/gsoc/test1.R')
text = scraper_gutenberg()
head(text)
text
len(Text)
text.length
help(length)
length(text)
source('~/R/gsoc/test1.R')
text = scraper_gutenberg()
source('~/R/gsoc/test2.R')
tagged_text = treeTagger_invoke('/home/daksh/Documents/Softwares/TreeTagger/','test.txt',"en")
source('~/R/gsoc/test3.R')
get_nouns(tagged_text)
